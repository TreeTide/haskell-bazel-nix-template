#
# Inserted into BUILD in nix-build mode, to replicate the haskell toolchain
# setup that rules_haskell would normally do. See WORKSPACE.nix.part
# file for explaining why is this needed.
#

load(
    "@rules_haskell//haskell:defs.bzl",
    "haskell_toolchain",
    "haskell_import",
)

# MARK: CUT START

# Note: toolchain_libraries should be put here, generated by the rules_haskell python script.

# MARK: CUT END

haskell_toolchain(
    name = "ghctc",
    compiler_flags =
        [
            "-threaded",  # Use multicore runtime
            "-rtsopts",   # Enable specifying runtime options on command line.

            # Set default RTS options.
            # -maxN<X>: use up to X cores if available.
            # -qn4: only use 4 cores for parallel GC.
            # -A64m: use larger allocation area.
            # -n4m: use allocation chunks, which can be beneficial on multicore.
            # See https://simonmar.github.io/posts/2015-07-28-optimising-garbage-collection-overhead-in-sigma.html.
            # -T: make gc stats available in-program
            # -t: print one-line GC statistics to stderr on exit.
            "-with-rtsopts=-maxN8 -qn4 -A64m -n4m -T -t",

            # Switch on useful extra warnings, and make warnings compilation
            # error.
            "-Wall",
            "-Werror",
            "-Wcompat",
            "-Wincomplete-record-updates",
            "-Wincomplete-uni-patterns",
            "-Wredundant-constraints",
        ],
    tools = ["@ghc//:bin"],
    version = "8.6.5",
    is_static = False,
    libraries = toolchain_libraries,
    locale_archive = "@glibc_locales//:locale-archive",
)

toolchain(
    name = "ghc_toolchain",
    toolchain_type = "@rules_haskell//haskell:toolchain",
    toolchain = ":ghctc",
    exec_compatible_with = [
        "@bazel_tools//platforms:linux",
        "@bazel_tools//platforms:x86_64",
    ],
    target_compatible_with = [
        "@bazel_tools//platforms:linux",
        "@bazel_tools//platforms:x86_64",
    ],
)

